%%% package.json
{
  "name": "%%package_name%%",
  "version": "%%version%%",
  "description": "",
  "main": "start.js",
  "scripts": {
    "build": "tsc",
    "watch": "tsc -w",
    "start": "nodemon -r dotenv/config build/server.js dotenv_config_path=.env",
    "start-prod": "node -r dotenv/config build/server.js dotenv_config_path=.env"
  },
  "author": "%%author%%",
  "license": "MIT",
  "devDependencies": {
    "@types/dotenv": "^8.2.0",
    "@types/express": "^4.17.11",
    "@types/node": "^17.0.13",
    "nodemon": "^2.0.15",
    "tslint": "^6.1.3",
    "typescript": "^4.1.3"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^8.2.0",
    "express": "^4.17.1",
  }
}

%%% tsconfig.json
{
  "compileOnSave": true,
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "declaration": true,
    "outDir": "build"
  },
  "lib": ["es2015"]
}

%%% .env
PORT=3000

%%% src/start.ts
import express from 'express';
import * as dotenv from 'dotenv';
import cors from 'cors';
import { ErrorHandlerMiddleware } from './middleware';

(async () => {
   try {
      // load environment vars
      dotenv.config();

      // init app with an websocket server
      const app = express();

      // add middleware
      app.use(cors());
      app.use(express.json());
      app.use(new ErrorHandlerMiddleware().use);

      // start server
      const port = process.env.PORT;
      app.listen(port, () => {
         console.log(`App listening on the port ${port}`);
      });

   } catch (err) {
      console.error(err);
   }
})();

%%% middleware/error-handler.middleware.ts
import { Request, Response } from 'express';

export class ErrorHandlerMiddleware {
   use = async (error: Error, req: Request, res: Response, next: (err?: any) => void) => {
      res.json({ message: error.message });
   }
}

%%% middleware/index.ts 
export * from './error-handler.middleware';