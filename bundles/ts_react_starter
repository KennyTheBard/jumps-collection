%%% package.json
{
   "name": "%%package_name%%",
   "version": "%%version%%",
   "private": true,
   "dependencies": {
      "@emotion/react": "^11.7.1",
      "@emotion/styled": "^11.6.0",
      "@testing-library/jest-dom": "^5.16.2",
      "@testing-library/react": "^12.1.2",
      "@testing-library/user-event": "^13.5.0",
      "@types/jest": "^27.4.0",
      "@types/node": "^16.11.22",
      "@types/react": "^17.0.39",
      "@types/react-dom": "^17.0.11",
      "history": "^5.2.0",
      "js-file-download": "^0.4.12",
      "react": "^17.0.2",
      "react-dom": "^17.0.2",
      "react-drag-drop-files": "^2.3.2",
      "react-file-drop": "^3.1.3",
      "react-helmet": "^6.1.0",
      "react-router": "^6.2.1",
      "react-router-dom": "^6.2.1",
      "react-scripts": "5.0.0",
      "typescript": "^4.5.5"
   },
   "devDependencies": {
      "@babel/core": "^7.17.0",
      "@types/react-helmet": "^6.1.5",
      "@types/react-router": "^3.0.19",
      "sass": "^1.49.7"
   },
   "scripts": {
      "start": "react-scripts start",
      "build": "react-scripts build",
      "test": "react-scripts test",
      "eject": "react-scripts eject"
   },
   "eslintConfig": {
      "extends": [
         "react-app",
         "react-app/jest"
      ]
   },
   "browserslist": {
      "production": [
         ">0.2%",
         "not dead",
         "not op_mini all"
      ],
      "development": [
         "last 1 chrome version",
         "last 1 firefox version",
         "last 1 safari version"
      ]
   }
}


%%% tsconfig.json
{
   "compilerOptions": {
      "target": "es5",
      "lib": [
         "dom",
         "dom.iterable",
         "esnext"
      ],
      "allowJs": true,
      "skipLibCheck": true,
      "esModuleInterop": true,
      "allowSyntheticDefaultImports": true,
      "strict": true,
      "forceConsistentCasingInFileNames": true,
      "noFallthroughCasesInSwitch": true,
      "module": "esnext",
      "moduleResolution": "node",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "noEmit": true,
      "jsx": "react-jsx"
   },
   "include": [
      "src"
   ]
}

%%% src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

%%% src/index.css
body {
   margin: 0;
   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
     'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
     sans-serif;
   -webkit-font-smoothing: antialiased;
   -moz-osx-font-smoothing: grayscale;
 }
 
 code {
   font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
     monospace;
 }

%%% src/react-app-env.d.ts
/// <reference types="react-scripts" />

%%% src/reportWebVitals.ts 
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

%%% src/setupTests.ts 
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

%%% src/App.tsx
import React from 'react';
import Helmet from 'react-helmet';
import {
  BrowserRouter,
  Route,
  Routes,
} from 'react-router-dom';

import './App.css';


export default class App extends React.Component {

  state: {
    alerts: string[],
  } = {
      alerts: []
    }

  constructor(props: any) {
    super(props);

    this.addAlert = this.addAlert.bind(this);
  }


  addAlert(message: string) {
    this.setState({
      alerts: [
        ...this.state.alerts,
        message
      ]
    });
    setTimeout(() => {
      this.setState({ alerts: [...this.state.alerts].slice(1) });
    },
      3000
    );
  }

  render() {
    return (
      <div className="App">
        <Helmet>
          <title>%%AppTitle%%</title>
        </Helmet>
      </div>
    );
  }
}

%%% src/App.test.tsx 
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

%%% src/App.css
// add base css here

%%% public/robots.txt
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

%%% public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>%%AppTitle%%</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

%%% manifest.json
{
   "short_name": "%%AppTitle%%",
   "name": "%%AppTitle%%",
   "icons": [
   // example icons
   //   {
   //     "src": "favicon.ico",
   //     "sizes": "64x64 32x32 24x24 16x16",
   //     "type": "image/x-icon"
   //   },
   //   {
   //     "src": "logo192.png",
   //     "type": "image/png",
   //     "sizes": "192x192"
   //   },
   //   {
   //     "src": "logo512.png",
   //     "type": "image/png",
   //     "sizes": "512x512"
   //   }
   ],
   "start_url": ".",
   "display": "standalone",
   "theme_color": "#000000",
   "background_color": "#ffffff"
 }
 